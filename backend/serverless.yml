service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    TODOS_TABLE: Todos-${self:provider.stage}
    TODOS_CREATED_AT_INDEX: CreatedAtIndex
    ATTACHMENTS_BUCKET: serverless-todo-attachments-url-${self:provider.stage}-${self:provider.region}
  
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - "*"
    - Effect: Allow
      Action:
        - logs:CreateLogStream
        - logs:CreateLogGroup
        - logs:PutLogEvents
      Resource: '*'
    
custom:
  serverless-offline:
    httpPort: 3003

  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      domain:
        sources:
          - table: ${self:provider.environment.TODOS_TABLE}
            sources: [./offline/migrations/todos.json]
  
  documentation:
    api:
      info:
        version: v1.0.0
        title: Todo API
        description: Serverless todo application
    models:
      - name: CreateTodoRequest
        contentType: application/json
        schema: ${file(./src/models/validators/create-todo-request.json)}
      - name: UpdateTodoRequest
        contentType: application/json
        schema: ${file(./src/models/validators/update-todo-request.json)}

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler
    iamRoleStatementsInherit: true 

  # TODO: Configure this function
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true      
    iamRoleStatementsName: get-todo-role-function
    iamRoleStatements:
      - Effect: Allow 
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  #TODO: Configure this function
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new todo item
            description: Create a new todo item
            requestModels:
              'application/json': CreateTodoRequest
    iamRoleStatementsInherit: true 
    iamRoleStatementsName: create-todo-role-function
    iamRoleStatements:
      - Effect: Allow 
        Action: 
          - dynamodb:Query
          - dynamodb:PutItem 
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  #TODO: Configure this function
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          uthorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a new todo item
            description: Update a new todo item
            requestModels:
              'application/json': UpdateTodoRequest
      - http:
          method: put 
          path: todos/{todoId}
          cors: true
          authorizer: Auth
          allowCredentials: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a new todo item
            description: Update a new todo item
            requestModels:
              'application/json': UpdateTodoRequest
    iamRoleStatementsInherit: true 
    iamRoleStatementsName: update-todo-role-function
    iamRoleStatements:
      - Effect: Allow 
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  # TODO: Configure this function
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatementsName: delete-todo-role-function
    iamRoleStatements:
      - Effect: Allow 
        Action:
          - dynamodb:Query
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
    

  #TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatementsName: generate-upload-url-role
    iamRoleStatements:
      - Effect: Allow 
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action: [ s3:PutObject ]
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_BUCKET}/*

  SyncWithElasticsearch:
    environment:
      ES_ENDPOINT: !GetAtt TodosSearch.DomainEndpoint
    handler: src/lambda/dynamoDb/elasticSearchSync.handler
    events:
      - stream:
          type: dynamodb 
          arn: !GetAtt TodosTable.StreamArn
    iamRoleStatementsName: sync-with-elasticsearch-role      
    iamRoleStatementsInherit: true

resources:
  Resources:
    # TODO: Add any necessary AWS resources
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        TableName: ${self:provider.environment.TODOS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TODOS_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index
    
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENTS_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET 
                - PUT 
                - POST                 
                - DELETE
                - HEAD 
              MaxAge: 3000
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref AttachmentsBucket
        PolicyDocument: 
          Version: '2012-10-17'
          Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'           
            Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_BUCKET}/*

    TodosSearch:
      Type: AWS::Elasticsearch::Domain
      Properties:
        ElasticsearchVersion: '6.3'
        DomainName: todos-search-app-${self:provider.stage}
        ElasticsearchClusterConfig:
          DedicatedMasterEnabled: false
          InstanceCount: '1'
          ZoneAwarenessEnabled: false
          InstanceType: t2.small.elasticsearch
        EBSOptions:
          EBSEnabled: true
          Iops: 0
          VolumeSize: 10
          VolumeType: 'gp2'
        AccessPolicies:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                AWS: !Sub 'arn:aws:sts::${AWS::AccountId}:assumed-role/${self:service}-${self:provider.stage}-${self:provider.region}-lambdaRole/serverless-todo-app-${self:provider.stage}-SyncWithElasticsearch'
              Action: ['es:ESHttp*']
              Resource: !Sub 'arn:aws:es:${self:provider.region}:${AWS::AccountId}:domain/todos-search-app-${self:provider.stage}/*'
            - Effect: Allow
              Principal:
                AWS: '*'
              Action: ['es:ESHttp*']
              Resource: !Sub 'arn:aws:es:${self:provider.region}:${AWS::AccountId}:domain/todos-search-app-${self:provider.stage}/*'
              Condition:
                IpAddress:
                  aws:SourceIp:
                    - ipAddr
            


    